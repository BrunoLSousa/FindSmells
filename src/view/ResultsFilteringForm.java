/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.util.List;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import metrics.Granulatiry;
import structure.Method;
import structure.Project;
import structure.dao.MethodDAO;
import structure.dao.PackageDAO;
import structure.dao.TypeDAO;

/**
 *
 * @author bruno
 */
public class ResultsFilteringForm extends javax.swing.JFrame {

    /**
     * Creates new form ResultsFiltering
     *
     * @param artefactsWithBadSmells
     * @param granularity
     * @param project
     */
    public ResultsFilteringForm(Object artefactsWithBadSmells, Granulatiry granularity, Project project) {
        this.artefactsWithBadSmells = artefactsWithBadSmells;
        this.granularity = granularity;
        this.project = project;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelResults = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabelResult = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableResults = new javax.swing.JTable();
        jButtonExportCsv = new javax.swing.JButton();

        setTitle("FindSmells");
        setResizable(false);

        jPanelResults.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setText("Results of Filtering");

        jLabel2.setText("Result:");

        jLabelResult.setText("jLabel3");

        jTableResults.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTableResults);
        updateLabelResult();
        tableResults();

        jButtonExportCsv.setText("Export Data in CSV");

        javax.swing.GroupLayout jPanelResultsLayout = new javax.swing.GroupLayout(jPanelResults);
        jPanelResults.setLayout(jPanelResultsLayout);
        jPanelResultsLayout.setHorizontalGroup(
            jPanelResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelResultsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 904, Short.MAX_VALUE)
                    .addGroup(jPanelResultsLayout.createSequentialGroup()
                        .addGroup(jPanelResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(jPanelResultsLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelResult)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelResultsLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonExportCsv)))
                .addContainerGap())
        );
        jPanelResultsLayout.setVerticalGroup(
            jPanelResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelResultsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanelResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabelResult))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonExportCsv)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelResults, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelResults, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateLabelResult(){
        if(granularity.equals(Granulatiry.Type)){
            List<structure.Type> types = (List<structure.Type>) artefactsWithBadSmells;
            int total = new TypeDAO().totalArtifacts(this.project);
            this.jLabelResult.setText(types.size() + " of " + total + " classes.");
        }else if(granularity.equals(Granulatiry.Method)){
            List<Method> methods = (List<Method>) artefactsWithBadSmells;
            int total = new MethodDAO().totalArtifacts(this.project);
            this.jLabelResult.setText(methods.size() + " of " + total + " methods.");
        }else {
            List<structure.Package> packages = (List<structure.Package>) artefactsWithBadSmells;
            int total = new PackageDAO().totalArtifacts(this.project);
            this.jLabelResult.setText(packages.size() + " of " + total + " packages.");
        }
    }
    
    private void tableResults() {
        String[] column = getColumns();
        String[][] data = getData();
        if (data != null) {
            jTableResults = new JTable(data, column);
            DefaultTableCellRenderer cellRender = new DefaultTableCellRenderer();
            cellRender.setHorizontalAlignment(SwingConstants.CENTER);
            jTableResults.getTableHeader().setReorderingAllowed(false);
            jTableResults.setEnabled(false);
            jScrollPane2.setViewportView(jTableResults);
        } else {
            JLabel emptyLabel = new JLabel("No bad smells returned to this detection strategy.!!!");
            emptyLabel.setHorizontalAlignment(SwingConstants.CENTER);
            jScrollPane2.setViewportView(emptyLabel);
        }
    }

    private String[][] getData() {
        if(granularity.equals(Granulatiry.Type)){
            return getDataType();
        }else if(granularity.equals(Granulatiry.Method)){
            return getDataMethod();
        }else {
            return getDataPackage();
        }
    }

    private String[][] getDataType() {
        List<structure.Type> types = (List<structure.Type>) artefactsWithBadSmells;
        if (!types.isEmpty()) {
            String[][] data = new String[types.size()][2];
            int index = 0;
            for (structure.Type t : types) {
                data[index] = new String[]{t.getName(), t.getSource(), t.getPack()};
                index++;
            }
            return data;
        }
        return null;
    }

    private String[][] getDataMethod() {
        List<Method> methods = (List<Method>) artefactsWithBadSmells;
        if (!methods.isEmpty()) {
            String[][] data = new String[methods.size()][2];
            int index = 0;
            for (Method m : methods) {
                data[index] = new String[]{m.getName(), m.getSource(), m.getPack()};
                index++;
            }
            return data;
        }
        return null;
    }

    private String[][] getDataPackage() {
        List<structure.Package> packages = (List<structure.Package>) artefactsWithBadSmells;
        if (!packages.isEmpty()) {
            String[][] data = new String[packages.size()][1];
            int index = 0;
            for (structure.Package p : packages) {
                data[index] = new String[]{p.getName(), p.getPack()};
                index++;
            }
            return data;
        }
        return null;
    }

    private String[] getColumns() {
        String[] columns;
        if (granularity.equals(Granulatiry.Method) || granularity.equals(Granulatiry.Type)) {
            columns = new String[]{"Name", "Source", "Package"};
        }else {
            columns = new String[]{"Name", "Package"};
        }
        return columns;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonExportCsv;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelResult;
    private javax.swing.JPanel jPanelResults;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableResults;
    // End of variables declaration//GEN-END:variables
    private Object artefactsWithBadSmells;
    private Granulatiry granularity;
    private Project project;
}
